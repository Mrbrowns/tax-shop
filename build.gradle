allprojects {
    apply plugin: 'java'
    group = 'com.yhsoft'
    version = '1.0'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

}
// 所有子项目的通用配置
subprojects {
    /* configure(subprojects.findAll {it.name.contains('war')}) {
         apply plugin: 'war'
     }*/

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //定义版本号


    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        mavenCentral()
        jcenter()

        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://maven.springframework.org/milestone' }
    }

    dependencies {

        compile "org.springframework.boot:spring-boot-actuator:${spring_boot_version}"
        compile "org.springframework.boot:spring-boot-autoconfigure:${spring_boot_version}"
        compile "org.springframework.boot:spring-boot-loader-tools:${spring_boot_version}"
        compile "org.springframework.boot:spring-boot-starter-logging:${spring_boot_version}"
        compile "org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}"
       // compile "org.springframework.boot:spring-boot-starter-security:${spring_boot_version}"
        compile("org.springframework.boot:spring-boot-devtools:${spring_boot_version}")
        compile("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}") {
            exclude module: 'spring-boot-starter-tomcat'
        }

        compile "org.springframework.boot:spring-boot-starter-undertow:${spring_boot_version}"
        compile "org.springframework.boot:spring-boot-starter-cloud-connectors:${spring_boot_version}"
        compile("org.springframework:spring-context-support:${spring_security_version}") {
            exclude(module: 'quartz')
        }

     //   compile "org.springframework.security:spring-security-config:${spring_security_version}"
      //  compile "org.springframework.security:spring-security-data:${spring_security_version}"
     //   compile "org.springframework.security:spring-security-web:${spring_security_version}"
        compile("io.springfox:springfox-swagger2:${springfox_version}") {
            exclude module: 'mapstruct'
        }
        compile("io.springfox:springfox-swagger-ui:${springfox_version}")
        compile("com.alibaba:druid:1.0.15")
        compile("mysql:mysql-connector-java:5.1.25")
        compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
            exclude(module: 'ch.qos.logback')
        }

        compile "org.apache.commons:commons-lang3:${commons_lang_version}"
        compile "commons-io:commons-io:${commons_io_version}"
        compile "javax.inject:javax.inject:${javax_inject_version}"
        compile "javax.transaction:javax.transaction-api:1.2"

        compile 'org.projectlombok:lombok:1.14.8'
        compile "io.springfox:springfox-bean-validators:${springfox_version}"
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
        compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        // https://mvnrepository.com/artifact/org.apache.shiro/shiro-core
        compile group: 'org.apache.shiro', name: 'shiro-core', version: '1.4.0'
        // https://mvnrepository.com/artifact/com.alibaba/fastjson
        compile group: 'com.alibaba', name: 'fastjson', version: '1.2.41'
        
        //mybatis
        compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatis_version}"
        // https://mvnrepository.com/artifact/tk.mybatis/mapper
        compile group: 'tk.mybatis', name: 'mapper', version: '${mybatis_version}'

        testCompile("org.springframework.boot:spring-boot-starter-test:${spring_boot_version}")


    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }

    configurations {
        // 所有需要忽略的包定义在此
        //all*.exclude group: 'commons-httpclient'
        //all*.exclude group: 'commons-logging'
        //all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    // 显示当前项目下所有用于 compile 的 jar.
    task listJars(description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
